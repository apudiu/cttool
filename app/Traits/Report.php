<?php
/**
 * Handles shell command execution
 */
namespace App\Traits;


use App\Exceptions\FileNotFoundException;
use App\Setting;
use App\Report as ReportModel;
use phpDocumentor\Reflection\Type;

trait Report {

    // Contains file upload result, generated by bulk upload tool
    private $resultFilePath;

    // Defined report/file status
    private $reportStatus;

    // Contains report data as array
    public $resultData;


    public function reportConstruct()
    {
        // report statuses
        $this->reportStatus = config('app.report.status');

        //result file pat
        $this->resultFilePath = getSetting('files_path') . DIRECTORY_SEPARATOR . 'result.txt';
    }

    /**
     * @throws FileNotFoundException
     */
    public function logReport() {
        // preparing files list
        $this->getResultFromFile();

        foreach ($this->resultData as $result) {
            // not using repository ..
            // saving log report based report to DB
            ReportModel::create($result);
        }
    }

    /**
     * Returns result counts
     * @param string $type allowed: success, failure, all
     * @return array|int
     */
    public function getResultCount($type='all') {

        if ($type == 'success') {

            return count(array_filter($this->resultData, function($log) {
                return ($log['status'] == "SUCCESS");
            }));
        } elseif ($type ==  'failure') {

            return count(array_filter($this->resultData, function($log) {
                return ($log['status'] == "FAILURE");
            }));
        } else {

            return [
                'success' => count(array_filter($this->resultData, function($log) {
                    return ($log['status'] == "SUCCESS");
                })),

                'failure' => count(array_filter($this->resultData, function($log) {
                    return ($log['status'] == "FAILURE");
                }))
            ];
        }
    }

    /**
     * @throws FileNotFoundException
     */
    private function getResultFromFile() {

        // checking file existence
        if (!file_exists($this->resultFilePath)) {
            // throw new FileNotFoundException("Report file: {$this->resultFilePath} is not available.");

            // creating the empty report file
            $this->createFile($this->resultFilePath);
        }

        // getting raw file content
        $fileContent = file_get_contents($this->resultFilePath);

        // formatting array
        $fileContent = explode("\n", $fileContent);

        // removing last blank item
        array_pop($fileContent);

        $this->resultData = array_map(function($logLine) {

            return $this->splitLogEntry($logLine);

        }, $fileContent);
    }

    /**
     * Takes log string (line) and
     * return formatted: file name, status and reason
     * @param string $logString (single log line)
     * @return array
     */
    private function splitLogEntry($logString) {
        // file status: SUCCESS
        $fileStatusSuccess = config('app.report.status')[0];

        // getting positions
        $fileTimeStartPos = strpos($logString, '[') +1;
        $fileNamePos = strpos($logString, ': ') +2;
        $fileStatusPos = strpos($logString, '] ') +2;
        $fileErrorReasonPos = strpos($logString, ' => ');

        // getting strings
        $fileTime = substr($logString, $fileTimeStartPos, ($fileStatusPos -3));
        $fileName = substr($logString, $fileNamePos);
        $fileStatus = substr($logString, $fileStatusPos, strlen($fileStatusSuccess));

        $data = [
            'time' => $fileTime,
            'name' => $fileName,
            'status' => $fileStatus,
            'reason' => null
        ];

        // getting error reason if there's an error
        if ($fileErrorReasonPos) {
            // working with error reason
            // skipping 4 more chars
            $fileErrorReasonPosSkipped = $fileErrorReasonPos +4;

            // getting error reason string
            $data['reason'] = substr($logString, $fileErrorReasonPosSkipped);

            // working with document name when error
            $errorFileNamePos = strpos($data['name'], ' => ');
            $data['name'] = substr($data['name'], 0, $errorFileNamePos);
        }

        return $data;
    }

    /**
     * Creates specified files
     * @param string $filePath
     */
    private function createFile($filePath) {
        $fileHandler = fopen($filePath, 'w');
        fclose($fileHandler);
    }
}
